@page "/quiz"
@using BlazorQuiz.Shared
@inject HttpClient Http

<style>
    @@import url(//fonts.googleapis.com/earlyaccess/nanumgothiccoding.css); 
</style>

<div class="main">
    <div class="box">
        @if (quiz == null)
        {
            <p><em>Loading...</em></p>
        }
        else
        {
            <div class="quiz-progress">
                <div class="quiz-progress-box" role="progressbar" style="@($"width: {progress}%")" aria-valuenow="@progress" aria-valuemin="0" aria-valuemax="100"></div>
               
                @if (progress != "100")
                {     
                    <div class="quiz-progress-value">@($"{progress}%")</div>
                }
             </div>

            if (current < 6)
            {
                <div class="quiz">
                    <div class="quiz-title">@quiz.Question</div>
                    <img src="@quiz.Url" width="300px"/>
                    @foreach (var answer in quiz.Answers)
                    {
                        <div class="quiz-answer" @onclick="()=> Choice(answer)">@answer.Example</div>
                    }
                </div>
            }
            else
            {
                <div class="quiz-gameover">Game Over</div>
                <div class="quiz-result">총 @questionCount 문제 중에 <span>@correctCount</span> 문제 정답!</div>

                <div class="quiz-message">@resultMessage</div>

                <div class="quiz-buttons">
                    <button @onclick="Reset" class="quiz-retry">다시하기</button>
                </div>
            }
        }
    </div>
</div>

@code {
    private int questionCount = 5;
    private int correctCount = 0;
    private int current = 0;
    private string resultMessage;

    private QuizModel[] quizs;
    private QuizModel quiz;

    private string message0 = "일부러 장난치신거죠?😑";
    private string message1 = "컨디션이 안 좋으신 건가요..?😵";
    private string message2 = "헷갈렸던 문제는 💻검색💻해보는 센스!!";
    private string message3 = "집중해서 다시 풀어보아요!💪";
    private string message4 = "한번 더 풀고 만점 도전!😉";
    private string message5 = "🌟축하드립니다🌟 고인물 인정!";
    
    private string progress = "";

    protected override async Task OnInitializedAsync()
    {
        await Reset();
    }

    private async Task Reset()
    {
        quizs = await Http.GetFromJsonAsync<QuizModel[]>("QuizData");
        current = 0;
        correctCount = 0;
        Next();
    }

    private void Next()
    {
        if (current < 5)
        {
            quiz = quizs[current];
        }
        else
        {
            resultMessage = GetResultMessage(correctCount);
        }

        progress = (100 / 5 * current).ToString("0");
        current++;
    }

    private void Choice(AnswerModel answer)
    {
        if(answer.IsAnswer)
        {
            correctCount++;
        }

        Next();
    }

    private string GetResultMessage(int correctCount)
    {
        string ment ="";

        switch (correctCount)
        {
            case 0: ment = message0; break;
            case 1: ment = message1; break;
            case 2: ment = message2; break;
            case 3: ment = message3; break;
            case 4: ment = message4; break;
            case 5: ment = message5; break;
        }

        return ment;
    }
}
