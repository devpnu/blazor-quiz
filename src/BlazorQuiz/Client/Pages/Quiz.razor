@page "/quiz"
@using BlazorQuiz.Shared
@inject HttpClient Http
@inject IJSRuntime JSRuntime

<style>
    @@import url(//fonts.googleapis.com/earlyaccess/nanumgothiccoding.css); 
</style>


<div class="main">
    <div class="box">
        @if (quiz == null)
		{
			<p><em>Loading...</em></p>
		}
		else
		{
			<a href="https://smartstore.naver.com/wstimelab/">
				<img src="https://raw.githubusercontent.com/devpnu/blazor-quiz/master/data/promotion_quiz.png" alt="sponsor banner" class="spon-img"/>
			</a>

			if (current < 6)
			{				
					
				<div class="quiz">	
					<div class="mat-caption" style="float:left;">@String.Format("롤렉스 퀴즈 {0}", ($"{current}/{questionCount}")) 
						</div>
					<div class="mat-caption" style="float:right;">@String.Format("누적 방문자수 {0}명", totalPeople) 
					</div>
			
					<MatThemeProvider Theme="@theme2">
						<MatProgressBar Progress="@currentBy100"></MatProgressBar>
					</MatThemeProvider>
				</div>

				<div class="quiz">

					<img src="@quiz.Url" class="quiz-img"/>

					<div class="quiz-qqq" style="text-align: center">
						@foreach (var sub in quiz.Question.Split('n'))
						{
							@sub <br/>
						}
					</div>
				</div>

					@foreach (var answer in quiz.Answers)
					{
						<div class="quiz-answer" @onclick="()=> Choice(answer)">@answer.Example</div>
					}
			
			}
			else
			{
					<div class="quiz-gameover">Game Over</div>
					<div class="quiz-result">총 @questionCount 문제 중에 <span>@correctCount</span> 문제 정답!</div>

					<div class="quiz-message">@resultMessage</div>

					<div class="quiz-buttons">
						<button @onclick="Reset" class="quiz-retry">다시하기</button>
					</div>



						<p >
							<a @onclick="KakaoShare" >				
							  <img  class="kakao-img"
								src="https://developers.kakao.com/assets/img/about/logos/kakaolink/kakaolink_btn_small.png"
								alt="카카오링크 보내기 버튼"
							  >			 
								<img/>
							  <MatThemeProvider Theme="@theme3">
						<div style="text-align: center">
						<MatButton   class="mat-button" inline=true Outlined="true" TrailingIcon="@MatIconNames.Share">카카오톡으로 공유하기</MatButton>
				</div>
				</MatThemeProvider>
							</a>
						
					</p>

				
             			<h2 class="mat-h2"></h2>

        
       



			}



			<div class="mat-button" style="text-align: center">광고 및 비지니스 문의 devpnu@naver.com</div>

			<h2 class="mat-h2"></h2>
			<MatThemeProvider Theme="@theme1">
				<div class="mat-button"  style="text-align: center">OpenSource License</div>

				<div style="text-align: center">
					<MatButtonLink Href="https://www.matblazor.com" Outlined="true">1.Mat-Blazor</MatButtonLink>
					<MatButtonLink Href="https://github.com/devncore/blazor-quiz" Outlined="true">2.Blazor Quiz</MatButtonLink>
				</div>

			</MatThemeProvider>
		}
	</div>
</div>

@code {
	private int questionCount = 5;
	private int correctCount = 0;
	private int current = 0;
	private float currentBy100 = 0;
	public static int totalPeople = 0;


	private string resultMessage;

	private QuizModel[] quizs;
	private QuizModel quiz;

	private string message0 = "일부러 장난치신거죠?😑";
	private string message1 = "컨디션이 안 좋으신 건가요..?😵";
	private string message2 = "헷갈렸던 문제는 💻검색💻해보는 센스!!";
	private string message3 = "집중해서 다시 풀어보세요!💪";
	private string message4 = "한번 더 풀고 만점 도전!😉";
	private string message5 = "🌟축하드립니다🌟 롤렉스 덕후 인정!";

	private string progress = "";

	protected override async Task OnInitializedAsync()
	{
		await Reset();
	}

	private async Task Reset()
	{
		quizs = await Http.GetFromJsonAsync<QuizModel[]>("QuizData");
		var people = await Http.GetFromJsonAsync<People>("People");

		totalPeople = people.TotalPeopleCount;

		current = 0;
		correctCount = 0;
		Next();
	}

	private void Next()
	{
		if (current < questionCount)
		{
			quiz = quizs[current];
		}
		else
		{
			resultMessage = GetResultMessage(correctCount);
		}

		progress = (100 / 5 * current).ToString("0");
		currentBy100 = (float)(current) / (float)questionCount;
		current++;
	}

	private void Choice(AnswerModel answer)
	{
		if (answer.IsAnswer)
		{
			correctCount++;
		}

		Next();
	}

	private string GetResultMessage(int correctCount)
	{
		string ment = "";

		switch (correctCount)
		{
			case 0: ment = message0; break;
			case 1: ment = message1; break;
			case 2: ment = message2; break;
			case 3: ment = message3; break;
			case 4: ment = message4; break;
			case 5: ment = message5; break;
		}

		return ment;
	}
	private async void KakaoShare()
	{
		string result = "";
		if( correctCount == questionCount)
		{
			result = "후후 난 만점 맞았어 ^-^";
		}
		else
		{
			result = "난 아쉽게도 " + (questionCount - correctCount).ToString() + "개 틀렸어....ㅠㅠ";
		}
		await JSRuntime.InvokeVoidAsync("add", result);
	}

	MatTheme theme1 = new MatTheme()
		{
			Primary = MatThemeColors.Grey._500.Value,
			Secondary = MatThemeColors.Grey._500.Value
		};
		
	MatTheme theme2 = new MatTheme()
		{
			Primary = "#b18d58",
			Secondary = "#b18d58"
		};
	MatTheme theme3 = new MatTheme()
		{
			Primary = "#fae100",
			Secondary = "#fae100"
		};
}
